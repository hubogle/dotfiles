patch:
  switches:
  - name: ascii_mode
    reset: 0
    # states: [ 中文, 英文 ]
  - name: emoji_suggestion
    states: [ "😣️","😁️"]
    reset: 1
  - name: full_shape
    states: [ 半角, 全角 ]
    reset: 0
  # - name: transcription
  #   states: [ 简体 , 繁体 ]
  #   reset: 0
  # - name: ascii_punct
  #   states: [ "。，" , "．，" ]
  #   reset: 0
  menu/page_size: 9
  key_binder:
    import_preset: default
    # accept，实际接受的按键
    # send，输出效果
    # toggle，切换开关
    # when，作用范围
    # 按住 control + 符号就是小写
    bindings:
      - {accept: "Control+Shift+E", toggle: emoji_suggestion, when: always}
      - {accept: "Control+Shift+exclam", toggle: transcription, when: has_menu}
      - {accept: "Control+Shift+1", toggle: transcription, when: has_menu}
      - {accept: minus, send: Page_Up, when: paging}     # 使用`-`进行向上翻页（第一页时候无效）
      - {accept: equal, send: Page_Down, when: has_menu} # 使用`=`进行向下翻页
      # Emacs 风格的快捷键
      - { when: composing, accept: Control+p, send: Up }
      - { when: composing, accept: Control+n, send: Down }
      - { when: composing, accept: Control+b, send: Left }
      - { when: composing, accept: Control+f, send: Right }
      - { when: composing, accept: Control+a, send: Home }
      - { when: composing, accept: Control+e, send: End }
      - { when: composing, accept: Control+d, send: Delete }
      - { when: composing, accept: Control+k, send: Shift+Delete } # 删除到行尾
      - { when: composing, accept: Control+g, send: Escape }       # 退出编码
      - { when: composing, accept: Alt+v, send: Page_Up }          # 翻页
      - { when: composing, accept: Control+v, send: Page_Down }
      # 按词移动光标
      - { when: composing, accept: ISO_Left_Tab, send: Shift+Left } # ISO_Left_Tab 是 Shift+Tab
      # 选词
      - { when: composing, accept: Shift+Tab, send: Left }
      - { when: composing, accept: Tab, send: Right }              # tab 选择下一个

      # 翻页
      - { when: paging, accept: minus, send: Page_Up }             # 编码窗口翻页
      - { when: has_menu, accept: equal, send: Page_Down }
      - { when: paging, accept: comma, send: Page_Up }             # 候选窗口翻页
      - { when: has_menu, accept: period, send: Page_Down }
      - { when: predicting, accept: comma, send: comma }           # 在预编码模式下,不当作快捷键
      - { when: predicting, accept: period, send: period }
      # 切换状态
      - { when: always, accept: Control+Shift+1, select: .next }   # 切换输入方案
      - { when: always, accept: Control+Shift+2, toggle: ascii_mode } # 切换中/西文模式
      - { when: always, accept: Control+Shift+3, toggle: full_shape } # 切换全角/半角
      - { when: always, accept: Control+Shift+4, toggle: simplification } # 切换简体/繁体
      - { when: always, accept: Control+Shift+5, toggle: extended_charset } # 切换扩展字符
      - { when: always, accept: Shift+space, toggle: full_shape } # 另一种切换全角/半角的方式
      - { when: always, accept: Control+period, toggle: ascii_punct } # 切换中/西文标点

  punctuator:
    import_preset: symbols
    # 定义部分半角字符
    half_shape:
        "#": "#"
        "*": "*"
        '.' : { commit: 。 }
        "`": "`"
        "~": "~"
        "@": "@"
        "=": "="
        "/": "/"
        '\': "、"
        "_" : "──"
        "'": "'"
        '"': '"'
        ';': ';'
        "[": ["【", "["]
        "]": ["】", "]"]
        "$": ["¥", "$", "€", "£", "¢", "¤"]
        "<": ["《", "〈", "«", "<"]
        ">": ["》", "〉", "»", ">"]
  speller:
    alphabet: zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA
