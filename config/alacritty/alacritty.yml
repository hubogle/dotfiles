import:
  - ~/.config/alacritty/alacritty_color_schemes.yml

# 会覆盖环境变量
env: # 设置终端 256 色
  TERM: xterm-256color

window: # 重启生效
  dimensions: # 默认初始化大小
    columns: 120
    lines: 40

  #position:   # 窗口位置
  #  x: 0
  #  y: 0

  padding: # 窗口边缘空白
    x: 0
    y: 0

  dynamic_padding: false # 在终端内容周围均匀分布其他填充

  # 窗口样式
  # full: 边框和标题栏
  # none: 无边框或标题栏
  # transparent: 标题栏、透明背景和标题栏按钮
  # buttonless: 标题栏、透明背景和无标题栏按钮
  decorations: buttonless #  窗口样式
  opacity: 0.95 # 窗口透明度

  #   - Windowed
  #   - Maximized
  #   - Fullscreen
  #   - SimpleFullscreen
  #startup_mode: Windowed # 启动模式

  # Window title
  #title: Alacritty

  # Allow terminal applications to change Alacritty's window title.
  #dynamic_title: true

scrolling:
  history: 10000 # 回滚区最大行数
  multiplier: 3 # 滚动距离
  # faux_multiplier: 0 # 假滚动, tmux 备用屏幕缓冲区激活时滚动，0 禁用
  # auto_scroll: true #当新文本写入终端时滚动到底部。

font: # 字体设置
  normal:
    # Default:
    #   - (macOS) Menlo
    #   - (Linux/BSD) monospace
    #   - (Windows) Consolas
    family: JetBrainsMono Nerd Font
    style: Regular

  # Bold font face
  bold:
    family: JetBrainsMono Nerd Font
    style: Bold

  # Italic font face
  italic:
    family: JetBrainsMono Nerd Font
    style: Italic

  # Bold italic font face
  bold_italic:
    family: JetBrainsMono Nerd Font
    style: Bold Italic

  size: 12
  # 字间距设置
  offset:
    x: 0
    y: 1

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increasing `x` moves the glyph to the
  # right, increasing `y` moves the glyph upward.
  #glyph_offset:
  #  x: 0
  #  y: 0

  # Thin stroke font rendering (macOS only)
  # 细线字体适用于视网膜屏幕
  # use_thin_strokes: true
  # defaults write -g AppleFontSmoothing -int 0
  builtin_box_drawing: true # true 对方框图形字符使用内置字体

draw_bold_text_with_bright_colors: true # true 使用明亮的颜色变体绘制粗体文本。

bell: # 每次收到BEL控制字符时，铃声就会响起。
  # Values for `animation`:
  #   - Ease
  #   - EaseOut
  #   - EaseOutSine
  #   - EaseOutQuad
  #   - EaseOutCubic
  #   - EaseOutQuart
  #   - EaseOutQuint
  #   - EaseOutExpo
  #   - EaseOutCirc
  #   - Linear
  animation: EaseOutExpo # 视觉铃声响起时闪烁屏幕的动画效果。

  duration: 2 # 视觉铃声闪烁的持续时间
  color: "#ffffff" # 视角动画颜色

  # Bell Command
  #
  # 每当铃声响起时，就会执行该程序。
  #
  # When set to `command: None`, no command will be executed.
  #
  # Example:
  #   command:
  #     program: notify-send
  #     args: ["Hello, World!"]
  #
  #command: None

selection:
  # 包含用作分隔符的所有字符
  semantic_escape_chars: ",│`|:\"' ()[]{}<>\t@="
  save_to_clipboard: true # 选中文本复制

cursor:
  style:
    #   - ▇ Block
    #   - _ Underline
    #   - | Beam
    shape: Block
    # Values for `blinking`:
    #   - Never: 防止光标闪烁
    #   - Off: 默认情况下禁用闪烁
    #   - On: 默认情况下启用闪烁
    #   - Always: 强制光标始终闪烁
    blinking: Always # 光标闪烁状态

  # Vi mode cursor style
  #
  # If the vi mode cursor style is `None` or not specified, it will fall back to
  # the style of the active value of the normal cursor.
  #
  # See `cursor.style` for available options.
  vi_mode_style: None

  # Cursor blinking interval in milliseconds.
  #blink_interval: 750

  # If this is `true`, the cursor will be rendered as a hollow box when the
  # window is not focused.
  #unfocused_hollow: true

  # Thickness of the cursor relative to the cell width as floating point number
  # from `0.0` to `1.0`.
  #thickness: 0.15

# 热更新配置
live_config_reload: true

# Default:
#   - (macOS) /bin/bash --login
#   - (Linux/BSD) user login shell
#   - (Windows) powershell
shell:
  # program: /opt/homebrew/bin/zsh
  program: /opt/homebrew/bin/tmux
  args:
    - new-session
    - -A
    - -D
    - -s
    - main
  # program: /bin/zsh
  # args:
  # - -l
  # - -c
  # - "/opt/homebrew/bin/tmux new-session -A -D -s main"

# 启动目录
#
# Directory the shell is started in. If this is unset, or `None`, the working
# directory of the parent process will be used.
#working_directory: None

# 按alt键时，在字符前发送ESC（\x1b）
#alt_send_esc: true

mouse:
  # Click settings
  # 双击和三次单击设置控制时间
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  #double_click: { threshold: 300 }
  #triple_click: { threshold: 300 }

  # 如果为“true”，则键入时光标将暂时隐藏
  hide_when_typing: false

# 正则表达式提示
# 终端提示可用于在终端的可见部分查找文本
# 并将其输送到其他应用程序
hints:
  # Keys used for the hint labels.
  #alphabet: "jfkdls;ahgurieowpq"

  # List with all available hints
  #
  # Each hint must have a `regex` and either an `action` or a `command` field.
  # The fields `mouse`, `binding` and `post_processing` are optional.
  #
  # The fields `command`, `binding.key`, `binding.mods`, `binding.mode` and
  # `mouse.mods` accept the same values as they do in the `key_bindings` section.
  #
  # The `mouse.enabled` field controls if the hint should be underlined while
  # the mouse with all `mouse.mods` keys held or the vi mode cursor is above it.
  #
  # If the `post_processing` field is set to `true`, heuristics will be used to
  # shorten the match if there are characters likely not to be part of the hint
  # (e.g. a trailing `.`). This is most useful for URIs.
  #
  # Values for `action`:
  #   - Copy
  #       Copy the hint's text to the clipboard.
  #   - Paste
  #       Paste the hint's text to the terminal or search.
  #   - Select
  #       Select the hint's text.
  #   - MoveViModeCursor
  #       Move the vi mode cursor to the beginning of the hint.

  enabled:
    - regex:
        "(ipfs:|ipns:|magnet:|mailto:|gemini:|gopher:|https:|http:|news:|file:|git:|ssh:|ftp:)\
        [^\u0000-\u001F\u007F-\u009F<>\"\\s{-}\\^⟨⟩`]+"
      command: open
      post_processing: true
      mouse:
        enabled: true
        mods: Shift

  #  - regex: "(ipfs:|ipns:|magnet:|mailto:|gemini:|gopher:|https:|http:|news:|file:|git:|ssh:|ftp:)\
  #            [^\u0000-\u001F\u007F-\u009F<>\"\\s{-}\\^⟨⟩`]+"
  #    command: open
  #    post_processing: true
  #    mouse:   # tmux 模式下按住 shift 可以点击
  #      enabled: true
  #      mods: None
  #    binding:
  #      key: U
  #      mods: Control|Shift

# Mouse bindings
#
# Mouse bindings are specified as a list of objects, much like the key
# bindings further below.
#
# To trigger mouse bindings when an application running within Alacritty
# captures the mouse, the `Shift` modifier is automatically added as a
# requirement.
#
# Each mouse binding will specify a:
#
# - `mouse`:
#
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
#
# - `action` (see key bindings for actions not exclusive to mouse mode)
#
# - Mouse exclusive actions:
#
#   - ExpandSelection
#       Expand the selection to the current mouse cursor location.
#
# And optionally:
#
# - `mods` (see key bindings)
#mouse_bindings:
#  - { mouse: Right,                 action: ExpandSelection }
#  - { mouse: Right,  mods: Control, action: ExpandSelection }
#  - { mouse: Middle, mode: ~Vi,     action: PasteSelection  }

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - ToggleViMode
#   - SearchForward
#       Start searching toward the right of the search origin.
#   - SearchBackward
#       Start searching toward the left of the search origin.
#   - Copy
#   - Paste
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollHalfPageUp
#   - ScrollHalfPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#       Remove the terminal's scrollback history.
#   - Hide
#       Hide the Alacritty window.
#   - Minimize
#       Minimize the Alacritty window.
#   - Quit
#       Quit Alacritty.
#   - ToggleFullscreen
#   - SpawnNewInstance
#       Spawn a new instance of Alacritty.
#   - CreateNewWindow
#       Create a new Alacritty window from the current process.
#   - ClearLogNotice
#       Clear Alacritty's UI warning and error notice.
#   - ClearSelection
#       Remove the active selection.
#   - ReceiveChar
#   - None
#
# - Vi mode exclusive actions:
#
#   - Open
#       Perform the action of the first matching hint under the vi mode cursor
#       with `mouse.enabled` set to `true`.
#   - ToggleNormalSelection
#   - ToggleLineSelection
#   - ToggleBlockSelection
#   - ToggleSemanticSelection
#       Toggle semantic selection based on `selection.semantic_escape_chars`.
#
# - Vi mode exclusive cursor motion actions:
#
#   - Up
#       One line up.
#   - Down
#       One line down.
#   - Left
#       One character left.
#   - Right
#       One character right.
#   - First
#       First column, or beginning of the line when already at the first column.
#   - Last
#       Last column, or beginning of the line when already at the last column.
#   - FirstOccupied
#       First non-empty cell in this terminal row, or first non-empty cell of
#       the line when already at the first cell of the row.
#   - High
#       Top of the screen.
#   - Middle
#       Center of the screen.
#   - Low
#       Bottom of the screen.
#   - SemanticLeft
#       Start of the previous semantically separated word.
#   - SemanticRight
#       Start of the next semantically separated word.
#   - SemanticLeftEnd
#       End of the previous semantically separated word.
#   - SemanticRightEnd
#       End of the next semantically separated word.
#   - WordLeft
#       Start of the previous whitespace separated word.
#   - WordRight
#       Start of the next whitespace separated word.
#   - WordLeftEnd
#       End of the previous whitespace separated word.
#   - WordRightEnd
#       End of the next whitespace separated word.
#   - Bracket
#       Character matching the bracket at the cursor's location.
#   - SearchNext
#       Beginning of the next match.
#   - SearchPrevious
#       Beginning of the previous match.
#   - SearchStart
#       Start of the match to the left of the vi mode cursor.
#   - SearchEnd
#       End of the match to the right of the vi mode cursor.
#
# - Search mode exclusive actions:
#   - SearchFocusNext
#       Move the focus to the next search match.
#   - SearchFocusPrevious
#       Move the focus to the previous search match.
#   - SearchConfirm
#   - SearchCancel
#   - SearchClear
#       Reset the search regex.
#   - SearchDeleteWord
#       Delete the last word in the search regex.
#   - SearchHistoryPrevious
#       Go to the previous regex in the search history.
#   - SearchHistoryNext
#       Go to the next regex in the search history.
#
# - macOS exclusive actions:
#   - ToggleSimpleFullscreen
#       Enter fullscreen without occupying another space.
#
# - Linux/BSD exclusive actions:
#
#   - CopySelection
#       Copy from the selection buffer.
#   - PasteSelection
#       Paste from the selection buffer.
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Search
#    - Alt
#    - Vi
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
#
# If the same trigger is assigned to multiple actions, all of them are executed
# in the order they were defined in.

# 按键绑定
key_bindings:
  - { key: Back, action: ReceiveChar } # 解决 Rime 输入法删除问题，0.11.0 版本修复问题
  # 新建
  - { key: D, mods: Command, chars: "\x60\"" } # 垂直切分
  - { key: D, mods: Command|Shift, chars: "\x60%" } # 水平切分
  - { key: T, mods: Command, chars: "\x60c" } # 新建 windows
  - { key: N, mods: Command, chars: "\x60\x61" } # 新建 Session
  - {
      key: N,
      mods: Command|Shift,
      command:
        {
          program: "/opt/homebrew/bin/alacritty",
          args:
            ["msg", "create-window", "-e", "/opt/homebrew/bin/zsh", "--login"],
        },
    }

  # 关闭
  - { key: W, mods: Command, chars: "\x60x" } # 关闭 pane
  - { key: W, mods: Command|Shift, chars: "\x60&" } # 关闭 windows

  # 访问 pane
  - { key: J, mods: Option, chars: "\x60j" }
  - { key: K, mods: Option, chars: "\x60k" }
  - { key: L, mods: Option, chars: "\x60l" }
  - { key: H, mods: Option, chars: "\x60h" }
  - { key: Down, mods: Command, chars: "\x60j" }
  - { key: Up, mods: Command, chars: "\x60k" }
  - { key: Right, mods: Command, chars: "\x60l" }
  - { key: Left, mods: Command, chars: "\x60h" }

  # 调整 pane 大小
  - { key: Left, mods: Command|Shift, chars: "\x60H" } # 左调整大小
  - { key: Right, mods: Command|Shift, chars: "\x60L" }
  - { key: Up, mods: Command|Shift, chars: "\x60K" }
  - { key: Down, mods: Command|Shift, chars: "\x60J" }
  - { key: H, mods: Command|Shift, chars: "\x60H" } # 左调整大小
  - { key: L, mods: Command|Shift, chars: "\x60L" }
  - { key: J, mods: Command|Shift, chars: "\x60J" }
  - { key: K, mods: Command|Shift, chars: "\x60K" }

  # 访问 windows
  - { key: E, mods: Command, chars: "\x60\x05" } # Command + e 上次访问
  - { key: Key1, mods: Command, chars: "\x601" } # Command + 1 tmux 第一个窗口
  - { key: Key2, mods: Command, chars: "\x602" }
  - { key: Key3, mods: Command, chars: "\x603" }
  - { key: Key4, mods: Command, chars: "\x604" }
  - { key: Key5, mods: Command, chars: "\x605" }
  - { key: Key6, mods: Command, chars: "\x606" }
  - { key: Key7, mods: Command, chars: "\x067" }
  - { key: Key8, mods: Command, chars: "\x068" }
  - { key: Key9, mods: Command, chars: "\x069" }

  # 切换 windows
  - { key: LBracket, mods: Command, chars: "\x60p" } # Command + [ 上个窗口
  - { key: RBracket, mods: Command, chars: "\x60n" } # Command + ] 下个窗口
  - { key: Tab, mods: Option|Shift, chars: "\x60p" } # 上个窗口
  - { key: Tab, mods: Option, chars: "\x60n" } # 下个窗口
  # - { key: Grave,    mods: Option,        chars: "\x60n"} # 下个窗口

  - { key: Comma, mods: Command, chars: "\x60," } # , 重命名 windows
  - { key: Period, mods: Command|Shift, chars: "\x60." } # 修改当前窗口编号
  - { key: Return, mods: Command, chars: "\x60z" } # 当前 pane 全屏
  - { key: Z, mods: Command, chars: "\x60z" } # 当前 pane 全屏
  - { key: Return, mods: Command|Shift, chars: "\x60 " } # 切换 pane 布局
  - { key: Z, mods: Command|Shift, chars: "\x60 " } # 切换 pane 布局
  - { key: I, mods: Command, chars: "\x60y" } # 同步输入
  # - { key: S,        mods: Option,        chars: "\x60S"} # 展开 choose-tree
  - { key: G, mods: Command, chars: "\x60G" } # open navi
  - { key: T, mods: Command|Shift, chars: "\x60C" }
  - { key: S, mods: Command, chars: "\x1b:w\x0a" } # Type <escape>:w<enter> to save vim

  # 服务器 tmux 快捷键
  - { key: D, mods: Option, chars: "\x02\"" } # 左右拆分
  - { key: D, mods: Option|Shift, chars: "\x02%" } # 上下拆分
  - { key: Comma, mods: Control, chars: "\x02," } # 重命名
  - { key: Period, mods: Control|Shift, chars: "\x02." } # 修改当前窗口编号
  - { key: T, mods: Control, chars: "\x02c" } # 新建 windows
  - { key: W, mods: Control, chars: "\x02x" } # 关闭 pane
  - { key: W, mods: Control|Shift, chars: "\x02&" } # 关闭 windows
  - { key: LBracket, mods: Control, chars: "\x02p" } # Control + [ 上个窗口
  - { key: RBracket, mods: Control, chars: "\x02n" } # Control + ] 下个窗口
  - { key: S, mods: Control, chars: "\x02s" } # 切换会话
  - { key: Z, mods: Control, chars: "\x02z" } # 当前 pane 全屏
  - { key: Tab, mods: Control, chars: "\x02n" } # 下一个 windows
  - { key: Tab, mods: Control|Shift, chars: "\x02p" }
  - { key: Down, mods: Control|Shift, chars: "\x02\x1b\x5b\x42" }
  - { key: Up, mods: Control|Shift, chars: "\x02\x1b\x5b\x43" }
  - { key: Right, mods: Control|Shift, chars: "\x02\x1b\x5b\x43" }
  - { key: Left, mods: Control|Shift, chars: "\x02\x1b\x5b\x44" }

  - { key: Key0, mods: Control, chars: "\x020" } # Control + 0 tmux 第一个窗口
  - { key: Key1, mods: Control, chars: "\x021" }
  - { key: Key2, mods: Control, chars: "\x022" }
  - { key: Key3, mods: Control, chars: "\x023" }
  - { key: Key4, mods: Control, chars: "\x024" }
  - { key: Key5, mods: Control, chars: "\x025" }
  - { key: Key6, mods: Control, chars: "\x026" }
  - { key: Key7, mods: Control, chars: "\x027" }
  - { key: Key8, mods: Control, chars: "\x028" }
  - { key: Key9, mods: Control, chars: "\x029" }

  # (macOS only)
  #-----------改变字体--------------
  - { key: Key0, mods: Command, action: ResetFontSize }
  - { key: Plus, mods: Command, action: IncreaseFontSize }
  - { key: Minus, mods: Command, action: DecreaseFontSize }

  - { key: V, mods: Command, action: Paste }
  - { key: C, mods: Command, action: Copy }
  - { key: M, mods: Command, action: Minimize }
  - { key: Q, mods: Command, action: Quit }
  - { key: F, mods: Command|Control, action: ToggleFullscreen }

  # - { key: F,              mods: Command, mode: ~Search,     action: SearchForward         }
  # - { key: B,              mods: Command, mode: ~Search,     action: SearchBackward        }
  # - { key: K,              mods: Command, mode: ~Vi|~Search, chars: "\x0c"                 }
  # - { key: K,              mods: Command, mode: ~Vi|~Search, action: ClearHistory          }
  # - { key: C,              mods: Command, mode: Vi|~Search,  action: ClearSelection        }
  # - { key: H,              mods: Command,                    action: Hide                  }
  # - { key: H,              mods: Command|Alt,                action: HideOtherApplications }
  # - { key: N,              mods: Command,                    action: SpawnNewInstance      }
  # - { key: Equals,         mods: Command,                    action: IncreaseFontSize      }
  # - { key: NumpadAdd,      mods: Command,                    action: IncreaseFontSize      }
  # - { key: NumpadSubtract, mods: Command,                    action: DecreaseFontSize      }

  # other
  # https://github.com/alacritty/alacritty/issues/62#issuecomment-347552058
  # Support Alt keys for macOS:
  # https://github.com/alexherbo2/alacritty-extended-keys/blob/master/keys.yml

  # Alt + <letter> ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

  - { key: A, mods: Alt, chars: "\x1ba" }
  - { key: B, mods: Alt, chars: "\x1bb" }
  - { key: C, mods: Alt, chars: "\x1bc" }
  - { key: D, mods: Alt, chars: "\x1bd" }
  - { key: E, mods: Alt, chars: "\x1be" }
  - { key: F, mods: Alt, chars: "\x1bf" }
  - { key: G, mods: Alt, chars: "\x1bg" }
  - { key: H, mods: Alt, chars: "\x1bh" }
  - { key: I, mods: Alt, chars: "\x1bi" }
  - { key: J, mods: Alt, chars: "\x1bj" }
  - { key: K, mods: Alt, chars: "\x1bk" }
  - { key: L, mods: Alt, chars: "\x1bl" }
  - { key: M, mods: Alt, chars: "\x1bm" }
  - { key: N, mods: Alt, chars: "\x1bn" }
  - { key: O, mods: Alt, chars: "\x1bo" }
  - { key: P, mods: Alt, chars: "\x1bp" }
  - { key: Q, mods: Alt, chars: "\x1bq" }
  - { key: R, mods: Alt, chars: "\x1br" }
  - { key: S, mods: Alt, chars: "\x1bs" }
  - { key: T, mods: Alt, chars: "\x1bt" }
  - { key: U, mods: Alt, chars: "\x1bu" }
  - { key: V, mods: Alt, chars: "\x1bv" }
  - { key: W, mods: Alt, chars: "\x1bw" }
  - { key: X, mods: Alt, chars: "\x1bx" }
  - { key: Y, mods: Alt, chars: "\x1by" }
  - { key: Z, mods: Alt, chars: "\x1bz" }

  # Alt + Shift + <letter> ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

  - { key: A, mods: Alt|Shift, chars: "\x1bA" }
  - { key: B, mods: Alt|Shift, chars: "\x1bB" }
  - { key: C, mods: Alt|Shift, chars: "\x1bC" }
  - { key: D, mods: Alt|Shift, chars: "\x1bD" }
  - { key: E, mods: Alt|Shift, chars: "\x1bE" }
  - { key: F, mods: Alt|Shift, chars: "\x1bF" }
  - { key: G, mods: Alt|Shift, chars: "\x1bG" }
  - { key: H, mods: Alt|Shift, chars: "\x1bH" }
  - { key: I, mods: Alt|Shift, chars: "\x1bI" }
  - { key: J, mods: Alt|Shift, chars: "\x1bJ" }
  - { key: K, mods: Alt|Shift, chars: "\x1bK" }
  - { key: L, mods: Alt|Shift, chars: "\x1bL" }
  - { key: M, mods: Alt|Shift, chars: "\x1bM" }
  - { key: N, mods: Alt|Shift, chars: "\x1bN" }
  - { key: O, mods: Alt|Shift, chars: "\x1bO" }
  - { key: P, mods: Alt|Shift, chars: "\x1bP" }
  - { key: Q, mods: Alt|Shift, chars: "\x1bQ" }
  - { key: R, mods: Alt|Shift, chars: "\x1bR" }
  - { key: S, mods: Alt|Shift, chars: "\x1bS" }
  - { key: T, mods: Alt|Shift, chars: "\x1bT" }
  - { key: U, mods: Alt|Shift, chars: "\x1bU" }
  - { key: V, mods: Alt|Shift, chars: "\x1bV" }
  - { key: W, mods: Alt|Shift, chars: "\x1bW" }
  - { key: X, mods: Alt|Shift, chars: "\x1bX" }
  - { key: Y, mods: Alt|Shift, chars: "\x1bY" }
  - { key: Z, mods: Alt|Shift, chars: "\x1bZ" }

  # Alt + <number> ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

  - { key: Key0, mods: Alt, chars: "\x1b0" }
  - { key: Key1, mods: Alt, chars: "\x1b1" }
  - { key: Key2, mods: Alt, chars: "\x1b2" }
  - { key: Key3, mods: Alt, chars: "\x1b3" }
  - { key: Key4, mods: Alt, chars: "\x1b4" }
  - { key: Key5, mods: Alt, chars: "\x1b5" }
  - { key: Key6, mods: Alt, chars: "\x1b6" }
  - { key: Key7, mods: Alt, chars: "\x1b7" }
  - { key: Key8, mods: Alt, chars: "\x1b8" }
  - { key: Key9, mods: Alt, chars: "\x1b9" }

  # Alt + <character> ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

  - { key: Grave, mods: Alt, chars: "\x1b`" }
  - { key: Minus, mods: Alt, chars: "\x1b-" }
  - { key: Equals, mods: Alt, chars: "\x1b=" }
  - { key: LBracket, mods: Alt, chars: "\x1b[" }
  - { key: RBracket, mods: Alt, chars: "\x1b]" }
  - { key: Backslash, mods: Alt, chars: "\x1b\\" }
  - { key: Semicolon, mods: Alt, chars: "\x1b;" }
  - { key: Apostrophe, mods: Alt, chars: "\x1b'" }
  - { key: Comma, mods: Alt, chars: "\x1b," }
  - { key: Period, mods: Alt, chars: "\x1b." }
  - { key: Slash, mods: Alt, chars: "\x1b/" }

  # Alt + Shift + <character> ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

  - { key: Grave, mods: Alt|Shift, chars: "\x1b~" }
  - { key: Key1, mods: Alt|Shift, chars: "\x1b!" }
  - { key: Key2, mods: Alt|Shift, chars: "\x1b@" }
  - { key: Key3, mods: Alt|Shift, chars: "\x1b#" }
  - { key: Key4, mods: Alt|Shift, chars: "\x1b$" }
  - { key: Key5, mods: Alt|Shift, chars: "\x1b%" }
  - { key: Key6, mods: Alt|Shift, chars: "\x1b^" }
  - { key: Key7, mods: Alt|Shift, chars: "\x1b&" }
  - { key: Key8, mods: Alt|Shift, chars: "\x1b*" }
  - { key: Key9, mods: Alt|Shift, chars: "\x1b(" }
  - { key: Key0, mods: Alt|Shift, chars: "\x1b)" }
  - { key: Minus, mods: Alt|Shift, chars: "\x1b_" }
  - { key: Equals, mods: Alt|Shift, chars: "\x1b+" }
  - { key: LBracket, mods: Alt|Shift, chars: "\x1b{" }
  - { key: RBracket, mods: Alt|Shift, chars: "\x1b}" }
  - { key: Backslash, mods: Alt|Shift, chars: "\x1b|" }
  - { key: Semicolon, mods: Alt|Shift, chars: "\x1b:" }
  - { key: Apostrophe, mods: Alt|Shift, chars: "\x1b\"" }
  - { key: Comma, mods: Alt|Shift, chars: "\x1b<" }
  - { key: Period, mods: Alt|Shift, chars: "\x1b>" }
  - { key: Slash, mods: Alt|Shift, chars: "\x1b?" }

  # ctrl-^ doesn't work in some terminals like alacritty
  # - { key: Key6, mods: Control, chars: "\x1e" }
  #- { key: Paste,                                       action: Paste          }
  #- { key: Copy,                                        action: Copy           }
  #- { key: L,         mods: Control,                    action: ClearLogNotice }
  #- { key: L,         mods: Control, mode: ~Vi|~Search, chars: "\x0c"          }
  # - { key: PageUp,    mods: Shift,   mode: ~Alt,        action: ScrollPageUp,  }
  # - { key: PageDown,  mods: Shift,   mode: ~Alt,        action: ScrollPageDown }
  # - { key: Home,      mods: Shift,   mode: ~Alt,        action: ScrollToTop,   }
  #- { key: End,       mods: Shift,   mode: ~Alt,        action: ScrollToBottom }

  # Vi Mode
  #- { key: Space,  mods: Shift|Control, mode: ~Search,    action: ToggleViMode            }
  #- { key: Space,  mods: Shift|Control, mode: Vi|~Search, action: ScrollToBottom          }
  #- { key: Escape,                      mode: Vi|~Search, action: ClearSelection          }
  #- { key: I,                           mode: Vi|~Search, action: ToggleViMode            }
  #- { key: I,                           mode: Vi|~Search, action: ScrollToBottom          }
  #- { key: C,      mods: Control,       mode: Vi|~Search, action: ToggleViMode            }
  #- { key: Y,      mods: Control,       mode: Vi|~Search, action: ScrollLineUp            }
  #- { key: E,      mods: Control,       mode: Vi|~Search, action: ScrollLineDown          }
  #- { key: G,                           mode: Vi|~Search, action: ScrollToTop             }
  #- { key: G,      mods: Shift,         mode: Vi|~Search, action: ScrollToBottom          }
  #- { key: B,      mods: Control,       mode: Vi|~Search, action: ScrollPageUp            }
  #- { key: F,      mods: Control,       mode: Vi|~Search, action: ScrollPageDown          }
  #- { key: U,      mods: Control,       mode: Vi|~Search, action: ScrollHalfPageUp        }
  #- { key: D,      mods: Control,       mode: Vi|~Search, action: ScrollHalfPageDown      }
  #- { key: Y,                           mode: Vi|~Search, action: Copy                    }
  #- { key: Y,                           mode: Vi|~Search, action: ClearSelection          }
  #- { key: Copy,                        mode: Vi|~Search, action: ClearSelection          }
  #- { key: V,                           mode: Vi|~Search, action: ToggleNormalSelection   }
  #- { key: V,      mods: Shift,         mode: Vi|~Search, action: ToggleLineSelection     }
  #- { key: V,      mods: Control,       mode: Vi|~Search, action: ToggleBlockSelection    }
  #- { key: V,      mods: Alt,           mode: Vi|~Search, action: ToggleSemanticSelection }
  #- { key: Return,                      mode: Vi|~Search, action: Open                    }
  #- { key: K,                           mode: Vi|~Search, action: Up                      }
  #- { key: J,                           mode: Vi|~Search, action: Down                    }
  #- { key: H,                           mode: Vi|~Search, action: Left                    }
  #- { key: L,                           mode: Vi|~Search, action: Right                   }
  #- { key: Up,                          mode: Vi|~Search, action: Up                      }
  #- { key: Down,                        mode: Vi|~Search, action: Down                    }
  #- { key: Left,                        mode: Vi|~Search, action: Left                    }
  #- { key: Right,                       mode: Vi|~Search, action: Right                   }
  #- { key: Key0,                        mode: Vi|~Search, action: First                   }
  #- { key: Key4,   mods: Shift,         mode: Vi|~Search, action: Last                    }
  #- { key: Key6,   mods: Shift,         mode: Vi|~Search, action: FirstOccupied           }
  #- { key: H,      mods: Shift,         mode: Vi|~Search, action: High                    }
  #- { key: M,      mods: Shift,         mode: Vi|~Search, action: Middle                  }
  #- { key: L,      mods: Shift,         mode: Vi|~Search, action: Low                     }
  #- { key: B,                           mode: Vi|~Search, action: SemanticLeft            }
  #- { key: W,                           mode: Vi|~Search, action: SemanticRight           }
  #- { key: E,                           mode: Vi|~Search, action: SemanticRightEnd        }
  #- { key: B,      mods: Shift,         mode: Vi|~Search, action: WordLeft                }
  #- { key: W,      mods: Shift,         mode: Vi|~Search, action: WordRight               }
  #- { key: E,      mods: Shift,         mode: Vi|~Search, action: WordRightEnd            }
  #- { key: Key5,   mods: Shift,         mode: Vi|~Search, action: Bracket                 }
  #- { key: Slash,                       mode: Vi|~Search, action: SearchForward           }
  #- { key: Slash,  mods: Shift,         mode: Vi|~Search, action: SearchBackward          }
  #- { key: N,                           mode: Vi|~Search, action: SearchNext              }
  #- { key: N,      mods: Shift,         mode: Vi|~Search, action: SearchPrevious          }

  # Search Mode
  #- { key: Return,                mode: Search|Vi,  action: SearchConfirm         }
  #- { key: Escape,                mode: Search,     action: SearchCancel          }
  #- { key: C,      mods: Control, mode: Search,     action: SearchCancel          }
  #- { key: U,      mods: Control, mode: Search,     action: SearchClear           }
  #- { key: W,      mods: Control, mode: Search,     action: SearchDeleteWord      }
  #- { key: P,      mods: Control, mode: Search,     action: SearchHistoryPrevious }
  #- { key: N,      mods: Control, mode: Search,     action: SearchHistoryNext     }
  #- { key: Up,                    mode: Search,     action: SearchHistoryPrevious }
  #- { key: Down,                  mode: Search,     action: SearchHistoryNext     }
  #- { key: Return,                mode: Search|~Vi, action: SearchFocusNext       }
  #- { key: Return, mods: Shift,   mode: Search|~Vi, action: SearchFocusPrevious   }

debug:
  # Display the time it takes to redraw each frame.
  render_timer: false

  # Keep the log file after quitting Alacritty.
  persistent_logging: false

  # Log level
  #
  # Values for `log_level`:
  #   - Off
  #   - Error
  #   - Warn
  #   - Info
  #   - Debug
  #   - Trace
  log_level: Warn

  # Print all received window events.
  print_events: false
# Dracula theme for Alacritty
# https://draculatheme.com/alacritty
#
# Color palette
# https://spec.draculatheme.com
#
# Template
# https://github.com/alacritty/alacritty/blob/master/alacritty.yml
